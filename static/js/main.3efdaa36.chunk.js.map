{"version":3,"sources":["Components/Calendar1.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","marginTop","width","content","margin","backdrop","zIndex","drawer","color","Calendar1","props","classes","useState","currentMonth","Date","selectedDate","resultDate","state","setState","open","setOpen","timeOutRef","useRef","useEffect","clearTimeout","current","onDateClick","day","setTimeout","prevState","nextMonth","dateFns","prevMonth","className","onClick","days","startDate","i","push","key","renderDays","monthStart","monthEnd","endDate","console","log","rows","formattedDate","cloneDay","renderCells","Paper","Grid","container","item","class","id","data-date","Backdrop","CircularProgress","App","style","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8ZAWMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,UAAW,GACXC,MAAO,QAETC,QAAS,CACPC,OAAQ,GACRF,MAAO,QAETG,SAAU,CACRC,OAAQR,EAAMQ,OAAOC,OAAS,EAC9BC,MAAO,YA+LIC,EA3LG,SAAAC,GAEhB,IAAMC,EAAUf,IAFS,EAICgB,mBAAS,CACjCC,aAAc,IAAIC,KAClBC,aAAc,IAAID,KAClBE,WAAY,OAPW,mBAIlBC,EAJkB,KAIXC,EAJW,OASDN,oBAAS,GATR,mBASlBO,EATkB,KASZC,EATY,KAUnBC,EAAaC,mBAEnBC,qBAAU,WACR,OAAO,WACLC,aAAaH,EAAWI,YAEzB,IAEH,IAsFMC,EAAc,SAACC,GAEnBP,GAAQ,GAERC,EAAWI,QAAUG,YAAW,WAC9BV,GAAS,SAAAW,GAAS,sBACbA,EADa,CAEhBd,aAAcY,EACdX,WAAYW,OAEdP,GAAQ,KACP,MAGCU,EAAY,WAChBZ,EAAS,CACPL,aAAckB,IAAkBd,EAAMJ,aAAc,MAIlDmB,EAAY,WAChBd,EAAS,CACPL,aAAckB,IAAkBd,EAAMJ,aAAc,MAIxD,OAAQ,oCACN,yBAAKoB,UAAU,YA5Gb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OAAOC,QAASF,GAA/B,iBAIF,yBAAKC,UAAU,kBACb,8BAAOF,IAAed,EAAMJ,aAVf,eAYf,yBAAKoB,UAAU,cAAcC,QAASJ,GACpC,yBAAKG,UAAU,QAAf,mBAMW,WAMjB,IALA,IACME,EAAO,GAETC,EAAYL,IAAoBd,EAAMJ,cAEjCwB,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAKG,KACH,yBAAKL,UAAU,iBAAiBM,IAAKF,GAClCN,IAAeA,IAAgBK,EAAWC,GAR9B,UAanB,OAAO,yBAAKJ,UAAU,YAAYE,GAgF/BK,GA7Ee,WAAO,IACjB3B,EAA+BI,EAA/BJ,aAAcE,EAAiBE,EAAjBF,aAChB0B,EAAaV,IAAqBlB,GAClC6B,EAAWX,IAAmBU,GAC9BL,EAAYL,IAAoBU,GAChCE,EAAUZ,IAAkBW,GAElCE,QAAQC,IAAI,eAAgB9B,GAS5B,IAPA,IACM+B,EAAO,GAETX,EAAO,GACPR,EAAMS,EACNW,EAAgB,GAEbpB,GAAOgB,GAAS,CACrB,IADsB,IAAD,WACZN,GACPU,EAAgBhB,IAAeJ,EAThB,KAUf,IAAMqB,EAAWrB,EACjBQ,EAAKG,KACH,yBACEL,UAAS,mBACNF,IAAoBJ,EAAKc,GAEtBV,IAAkBJ,EAAKZ,GAAgB,WAAa,GADpD,YAGNwB,IAAKZ,EAELO,QAAS,kBAAMR,EAAYsB,KAE3B,0BAAMf,UAAU,UAAUc,GAC1B,0BAAMd,UAAU,MAAMc,KAG1BpB,EAAMI,IAAgBJ,EAAK,IAlBpBU,EAAI,EAAGA,EAAI,EAAGA,IAAM,IAoB7BS,EAAKR,KACH,yBAAKL,UAAU,MAAMM,IAAKZ,GACvBQ,IAGLA,EAAO,GAGT,OAAO,yBAAKF,UAAU,QAAQa,GAiC3BG,IAIAhC,EAAMD,WAEL,kBAACkC,EAAA,EAAD,CAAOjB,UAAWtB,EAAQZ,MACxB,kBAACoD,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,GAER,yBAAKC,MAAM,kBACT,6BAASC,GAAG,WAAWD,MAAM,kBAC3B,yBAAKA,MAAM,YAAYC,GAAG,WACxB,yBAAKD,MAAM,OACT,yBAAKA,MAAM,mBACT,wBAAIA,MAAM,8BAA8BvB,IAAed,EAAMD,WAAY,gBACzE,wBAAIsC,MAAM,YAER,wBAAIA,MAAM,QAAQE,YAAU,mBAC1B,2CACA,sIACqB,6BADrB,2BAMF,wBAAIF,MAAM,QAAQE,YAAU,mBAC1B,4CACA,sIACqB,6BADrB,qBAiBlB,KAEN,kBAACC,EAAA,EAAD,CAAUxB,UAAWtB,EAAQN,SAAUc,KAAMA,GAC3C,kBAACuC,EAAA,EAAD,CAAkBlD,MAAM,e,MCrMfmD,MARf,WACE,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.3efdaa36.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport * as dateFns from \"date-fns\"\r\nimport './Calendar1.css'\r\n\r\n// Material ui\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    marginTop: 20,\r\n    width: '100%',\r\n  },\r\n  content: {\r\n    margin: 10,\r\n    width: '100%'\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: '#fff',\r\n  },\r\n}))\r\n\r\nconst Calendar1 = props => {\r\n\r\n  const classes = useStyles()\r\n\r\n  const [state, setState] = useState({\r\n    currentMonth: new Date(),\r\n    selectedDate: new Date(),\r\n    resultDate: null,\r\n  })\r\n  const [open, setOpen] = useState(false);\r\n  const timeOutRef = useRef()\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeout(timeOutRef.current)\r\n    }\r\n  }, [])\r\n\r\n  const renderHeader = () => {\r\n\r\n    const dateFormat = \"MMMM yyyy\";\r\n\r\n    return (\r\n      <div className=\"header row flex-middle\">\r\n        <div className=\"col col-start\">\r\n          <div className=\"icon\" onClick={prevMonth}>\r\n            chevron_left\r\n          </div>\r\n        </div>\r\n        <div className=\"col col-center\">\r\n          <span>{dateFns.format(state.currentMonth, dateFormat)}</span>\r\n        </div>\r\n        <div className=\"col col-end\" onClick={nextMonth}>\r\n          <div className=\"icon\">chevron_right</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderDays = () => {\r\n    const dateFormat = \"EEEE\";\r\n    const days = [];\r\n\r\n    let startDate = dateFns.startOfWeek(state.currentMonth);\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      days.push(\r\n        <div className=\"col col-center\" key={i}>\r\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div className=\"days row\">{days}</div>;\r\n  }\r\n\r\n  const renderCells = () => {\r\n    const { currentMonth, selectedDate } = state;\r\n    const monthStart = dateFns.startOfMonth(currentMonth);\r\n    const monthEnd = dateFns.endOfMonth(monthStart);\r\n    const startDate = dateFns.startOfWeek(monthStart);\r\n    const endDate = dateFns.endOfWeek(monthEnd);\r\n\r\n    console.log('selectedDate', selectedDate)\r\n\r\n    const dateFormat = \"d\";\r\n    const rows = [];\r\n\r\n    let days = [];\r\n    let day = startDate;\r\n    let formattedDate = \"\";\r\n\r\n    while (day <= endDate) {\r\n      for (let i = 0; i < 7; i++) {\r\n        formattedDate = dateFns.format(day, dateFormat);\r\n        const cloneDay = day;\r\n        days.push(\r\n          <div\r\n            className={`col cell ${\r\n              !dateFns.isSameMonth(day, monthStart)\r\n                ? \"disabled\"\r\n                : dateFns.isSameDay(day, selectedDate) ? \"selected\" : \"\"\r\n              }`}\r\n            key={day}\r\n            // onClick={() => onDateClick(dateFns.parse(cloneDay, 'd', new Date()))}\r\n            onClick={() => onDateClick(cloneDay)}\r\n          >\r\n            <span className=\"number\">{formattedDate}</span>\r\n            <span className=\"bg\">{formattedDate}</span>\r\n          </div>\r\n        );\r\n        day = dateFns.addDays(day, 1);\r\n      }\r\n      rows.push(\r\n        <div className=\"row\" key={day}>\r\n          {days}\r\n        </div>\r\n      );\r\n      days = [];\r\n    }\r\n\r\n    return <div className=\"body\">{rows}</div>;\r\n  }\r\n\r\n  const onDateClick = (day) => {\r\n\r\n    setOpen(true)\r\n\r\n    timeOutRef.current = setTimeout(() => {\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        selectedDate: day,\r\n        resultDate: day\r\n      }))\r\n      setOpen(false)\r\n    }, 1000)\r\n  }\r\n\r\n  const nextMonth = () => {\r\n    setState({\r\n      currentMonth: dateFns.addMonths(state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  const prevMonth = () => {\r\n    setState({\r\n      currentMonth: dateFns.subMonths(state.currentMonth, 1)\r\n    });\r\n  };\r\n\r\n  return (<>\r\n    <div className=\"calendar\">\r\n      {renderHeader()}\r\n      {renderDays()}\r\n      {renderCells()}\r\n    </div>\r\n\r\n    {\r\n      (state.resultDate) ?\r\n\r\n        <Paper className={classes.root}>\r\n          <Grid container>\r\n            <Grid item>\r\n\r\n              <div class=\"main-container\">\r\n                <section id=\"timeline\" class=\"timeline-outer\">\r\n                  <div class=\"container\" id=\"content\">\r\n                    <div class=\"row\">\r\n                      <div class=\"col s12 m12 l12\">\r\n                        <h1 class=\"blue-text lighten-1 header\">{dateFns.format(state.resultDate, 'd MMMM yyyy')}</h1>\r\n                        <ul class=\"timeline\">\r\n\r\n                          <li class=\"event\" data-date=\"(10:00 - 11:30)\">\r\n                            <h3>Living Room</h3>\r\n                            <p>\r\n                              สัณหณัฐ งามฉายวงศ์ <br />\r\n                              MEAConnect: UI Meeting\r\n                            </p>\r\n                          </li>\r\n\r\n                          <li class=\"event\" data-date=\"(10:15 - 17:15)\">\r\n                            <h3>Meeting Room</h3>\r\n                            <p>\r\n                              ปวริศ โกวิทวีรธรรม <br />\r\n                              Connect\r\n                            </p>\r\n                          </li>\r\n\r\n                        </ul>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n\r\n        : null\r\n    }\r\n    <Backdrop className={classes.backdrop} open={open}>\r\n      <CircularProgress color=\"inherit\" />\r\n    </Backdrop>\r\n  </>)\r\n}\r\n\r\nexport default Calendar1\r\n","import React from 'react';\nimport Calendar1 from './Components/Calendar1'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div style={{ padding: '30px' }}>\n      <Calendar1 />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}